#!/usr/bin/env python

import os
import argparse
import datetime

parser = argparse.ArgumentParser(description='option')
parser.add_argument('-n', dest='Name')
parser.add_argument('-l', dest='RunList')
parser.add_argument('-y', dest='Year')
parser.add_argument('--option', dest='Option')
parser.add_argument('--nmax', dest='NMax', default=0, type=int)

args = parser.parse_args()

runlist = open(args.RunList).readlines()

pwd = os.getcwd()
CMSSW_BASE = os.environ['CMSSW_BASE']
SCRAM_ARCH = os.environ['SCRAM_ARCH']
SKFlatWD = os.environ['SKFlatWD']
SKFlatTag = os.environ['SKFlatTag']

#cfgfile = SKFlatWD+'/SKFlatMaker/script/TAMSA/RunSKFlatMaker_JECSQLite.py'
#if 'full' in args.RunList.lower():
cfgfile = SKFlatWD+'/SKFlatMaker/script/TAMSA/RunSKFlatMaker.py'

JobStartTime = datetime.datetime.now()
timestamp =  JobStartTime.strftime('%Y_%m_%d_%H%M%S')

outbasedir = '/gv0/DATA/SKFlat/'+SKFlatTag+'/'+args.Year+'/PrivateMC/'+args.Name+'/'
outbasedir = '/gv0/Users/jskim/SKFlat/'+SKFlatTag+'/'+args.Year+'/'+args.Name+'/'

#### first write the executable

JobName = timestamp+'__'+args.Name
os.system('mkdir -p '+JobName)

#### Submission script
out_sub = open(JobName+'/SubmitAll.sh','w')

#### Now loop over mass

for i in range(0,len(runlist)):

  mass = runlist[i].strip('\n').split('/')[-1].replace('.root','')

  this_JobDir = mass
  os.system('mkdir -p '+JobName+'/'+mass)


  i_file=0
  runfile = open(pwd+'/'+JobName+'/'+mass+'/run_'+str(i_file)+'.sh','w')

  outdest = outbasedir+mass+'/'+timestamp+'/'
  os.system('mkdir -p '+outdest)

  cmd  = "cmsRun "+cfgfile+" "+"\\\n"
  cmd += "inputFiles=file:"+runlist[i].strip('\n')+" \\\n"
  cmd += "outputFile="+outdest+"SKFlatNtuple_"+args.Year+"_MC_"+str(i_file)+".root"+" \\\n"
  cmd += args.Option
#"sampletype=PrivateMC year="+args.Year+" ScaleIDRange=1001,1045 PDFErrorIDRange=1046,1146 PDFAlphaSIDRange=1147,1148 PDFAlphaSScaleValue=0.75,0.75"

  runfile.write(cmd)

  runfile.close()

  #### write executable

  executable_filename = 'SKFlatMaker_'+args.Year+'_'+args.Name+'_'+mass+'.sh'
  executable = open(pwd+'/'+JobName+'/'+mass+'/'+executable_filename,'w')
  print>>executable,'''#!/bin/bash
SECTION=`printf $1`
WORKDIR=`pwd`

#### Don't make root history
export ROOT_HIST=0

#### use cvmfs for root ####
export CMS_PATH=/cvmfs/cms.cern.ch
source $CMS_PATH/cmsset_default.sh
export SCRAM_ARCH={0}
cd {1}/src/
echo "@@@@ SCRAM_ARCH = "$SCRAM_ARCH
echo "@@@@ cmsswrel = "$cmsswrel
echo "@@@@ scram..."
eval `scramv1 runtime -sh`
cd -
source {2}/run_${{SECTION}}.sh
'''.format(SCRAM_ARCH,CMSSW_BASE,pwd+'/'+JobName+'/'+mass)
  executable.close()

  #### Write jds

  concurrency_limits=''
  if args.NMax>0:
    concurrency_limits='concurrency_limits = n'+str(args.NMax)+'.'+os.getenv("USER")
  jdsfile = open(pwd+'/'+JobName+'/'+mass+'/submit.jds','w')
  print>>jdsfile,'''executable = {1}
universe   = vanilla
arguments  = $(Process)
log = condor.log
getenv     = True
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
output = job_$(Process).log
error = job_$(Process).err
{2}
queue {0}
'''.format('1', executable_filename,concurrency_limits)
  jdsfile.close()

  print>>out_sub,'''#### {0}
cd {0}
echo "@@@@ Submitting {0}..."
condor_submit submit.jds -batch-name {1}
cd ../
'''.format(mass,args.Name+"__"+args.Year)

out_sub.close()









